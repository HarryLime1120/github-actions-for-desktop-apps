# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

# This continuous integration pipeline is triggered anytime a user pushes code to the repo.
# This pipeline builds the Wpf project, runs unit tests, then saves the MSIX build artifact.
name: NET 6.0 CI (temporary)

# Trigger on every master branch push and pull request
on:
  push:
    branches:
      - lance/net6-update

jobs:

  build:

    strategy:
      matrix:
        targetplatform: [x86, x64]

    runs-on: windows-latest

    env:
      App_Packages_Directory: AppPackages
      SigningCertificate: GitHubActionsDemo.pfx
      Solution_Path: MyWpfApp.sln
      Test_Project_Path: MyWpfApp.Tests\MyWpfApp.Tests.csproj
      Wpf_Project_Path: MyWpfApp\MyWpfApp.csproj
      Wap_Project_Directory: MyWpfApp.Package
      Wap_Project_Name: MyWpfApp.Package.wapproj
      Actions_Allow_Unsecure_Commands: true # Allows AddPAth and SetEnv commands

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    # Use Nerdbank.GitVersioning to set version variables: https://github.com/AArnott/nbgv
    - name: Use Nerdbank.GitVersioning to set version variables
      uses: aarnott/nbgv@v0.4.0
      with:
        setAllVars: true

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: "6.0.x"

    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1

    # Update the version before build
    - name: Update manifest version
      run: |
        [xml]$manifest = get-content ".\$env:Wap_Project_Directory\Package.appxmanifest"
        $manifest.Package.Identity.Version = "$env:NBGV_SimpleVersion.0"
        $manifest.save(".\$env:Wap_Project_Directory\Package.appxmanifest")

    - name: .NET Restore
      run: dotnet restore $env:SolutionPath --runtime $env:RuntimeIdentifier
      env:
        RuntimeIdentifier: win-${{ matrix.targetplatform }}

    # Test
    - name: Execute Unit Tests
      run: dotnet test $env:Test_Project_Path

    # Restore the application
    - name:  Restore the Wpf application to populate the obj folder
      run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        Configuration: Debug
        RuntimeIdentifier: win-${{ matrix.targetplatform }}
    
    - name: NuGet Restore Wapp Project
      run: nuget restore $env:WappProject_Path
    
    # ************* TO BE UNCOMMENTED AFTER CERTIFICATE IS RENEWED ************* #

    # Decode the Base64 encoded Pfx
    # - name: Decode the Pfx
    #   run: |
    #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #     $currentDirectory = Get-Location
    #     $certificatePath = Join-Path -Path $currentDirectory -ChildPath $env:Wap_Project_Directory -AdditionalChildPath $env:SigningCertificate
    #     [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # # Build the Windows Application Packaging project
    # - name: Build the Windows Application Packaging Project (wapproj)
    #   run: msbuild $env:Solution_Path /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:AppxPackageDir=$env:AppxPackageDir /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=${{ secrets.Pfx_Key }} 
    #   env:
    #     AppxBundle: Never
    #     BuildMode: SideloadOnly
    #     AppxPackageDir: ${{ env.Wap_Project_Directory }}\${{ env.App_Packages_Directory }}
    #     Configuration: Debug
    #     TargetPlatform: ${{ matrix.targetplatform }}

    # # Remove the .pfx
    # - name: Remove the .pfx
    #   run: Remove-Item -path $env:Wap_Project_Directory\$env:SigningCertificate
    
    # # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: MSIX Package
    #     path: ${{ env.Wap_Project_Directory }}\${{ env.App_Packages_Directory }}

    # ************** TEMPORARY - UNTIL CODE SIGNING CERT IS UPDATED ************** #

    - name: Create self-signed certificate (TEMPORARY)
      id: create_cert
      run: |
        $cert = New-SelfSignedCertificate -Type Custom -Subject "CN=GitHubActionsDemo, O=Contoso Corporation, C=US" -KeyUsage DigitalSignature -FriendlyName "MyWPFApp.DevOpsDemo.Local" -CertStoreLocation "Cert:\CurrentUser\My" -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}")
        $pathInStore = 'Cert:\CurrentUser\My\' + $cert.thumbprint 
        $currentDirectory = Get-Location
        $certificatePath = Join-Path -Path $currentDirectory -ChildPath $env:Wap_Project_Directory -AdditionalChildPath $env:SigningCertificate
        $pwd = ConvertTo-SecureString -String "uselessCertificateP@ssw0rd" -Force -AsPlainText 
        Export-PfxCertificate -cert $pathInStore -FilePath $certificatePath -Password $pwd

        # This creates an output variable, which we can use in subsequent steps/jobs
        echo "::set-output name=CERT_PATH::$certificatePath"

    # Build the Windows Application Packaging project
    - name: Build the Windows Application Packaging Project (wapproj)
      run: msbuild $env:Solution_Path /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:AppxPackageDir=$env:AppxPackageDir /p:PackageCertificateKeyFile=$env:CertFilePath /p:PackageCertificatePassword=$env:CertPrivateKey 
      env:
        AppxBundle: Never
        BuildMode: SideloadOnly
        AppxPackageDir: ${{ env.Wap_Project_Directory }}\${{ env.App_Packages_Directory }}
        Configuration: Debug
        TargetPlatform: ${{ matrix.targetplatform }}
        CertFilePath: ${{ steps.create_cert.outputs.CERT_PATH }}
        CertPrivateKey: "uselessCertificateP@ssw0rd"
    
    - name: Create archive
      id: create_archive
      run: |
        $source = $env:Wap_Project_Directory\$env:App_Packages_Directory\*
        $destination = $env:Wap_Project_Directory\$env:App_Packages_Directory\$env:App_Packages_Archive
        Compress-Archive -Path $source -DestinationPath $destination
        echo "::set-output name=archive_path::$destination"
      env:
        App_Packages_Archive: AppPackages.zip

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package
        path: ${{ steps.create_archive.outputs.archive_path }}

    # ************** END TEMPORARY ************** #
